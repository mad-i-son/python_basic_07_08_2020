"""
1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных
программах в рамках первых трех уроков. Проанализировать результат и определить
программы с наиболее эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
b. написать 3 варианта кода (один у вас уже есть);
проанализировать 3 варианта и выбрать оптимальный;
c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить
в виде комментариев в файл с кодом. Не забудьте указать версию и разрядность вашей
ОС и интерпретатора Python;
d. написать общий вывод: какой из трёх вариантов лучше и почему.
"""

"""
3. Сформировать из введенного числа обратное по порядку входящих в него цифр
и вывести на экран. Например, если введено число 3486, надо вывести 6843.
"""
import sys

user_var = '3486789'
symbols = list(user_var)
print(f'Размер строки пользователя: {sys.getsizeof(user_var)}, размер той же строки но в списке'
      f' пользователя: {sys.getsizeof(symbols)}')
for el in range(len(user_var) // 2):
    tmp = symbols[el]
    print(f'Размер символа из строки пользователя: {sys.getsizeof(tmp)}')
    symbols[el] = symbols[len(user_var) - el - 1]
    symbols[len(user_var) - el - 1] = tmp
str_reverse = ''.join(symbols)
print(str_reverse)


num = int(3486789999)
print(f'Размер числа пользователя: {sys.getsizeof(num)}')
newnum = ""
print(f'Размер пустой строки пользователя: {sys.getsizeof(newnum)}')
while num:
    newnum += str((num % 10))
    num = num // 100
print(f'Размер заполненной строки пользователя: {sys.getsizeof(newnum)}')
print(newnum)


n = int(3486789999)
print(f'Размер числа пользователя: {sys.getsizeof(n)}')
while n>0:
    print(n%10, end="")
    n=n//10
    print(f'Размер числа пользователя после переноса запятой влево на один знак: {sys.getsizeof(n)}')


# Размер строки пользователя: 56, размер той же строки но в списке пользователя: 112
# Размер символа из строки пользователя: 50
# Размер символа из строки пользователя: 50
# Размер символа из строки пользователя: 50
# 9876843
# Размер числа пользователя: 32
# Размер пустой строки пользователя: 49
# Размер заполненной строки пользователя: 54
# 99864
# Размер числа пользователя: 32
# 9Размер числа пользователя после переноса запятой влево на один знак: 28
# 9Размер числа пользователя после переноса запятой влево на один знак: 28
# 9Размер числа пользователя после переноса запятой влево на один знак: 28
# 9Размер числа пользователя после переноса запятой влево на один знак: 28
# 8Размер числа пользователя после переноса запятой влево на один знак: 28
# 7Размер числа пользователя после переноса запятой влево на один знак: 28
# 6Размер числа пользователя после переноса запятой влево на один знак: 28
# 8Размер числа пользователя после переноса запятой влево на один знак: 28
# 4Размер числа пользователя после переноса запятой влево на один знак: 28
# 3Размер числа пользователя после переноса запятой влево на один знак: 24


#  Python резервирует много места под объекты, не зная изначально сколько его
# понадобится, при этом строки занимают в памяти больше места чем числа. Последний
# алгоритм оптимален, как по коду в плане быстродействия так и по занимаемой памяти